[{"content":"Factory design pattern; yaratımsal (creational) design pattern kategorisindedir. Nesne yaratmak icin, standart bir mimari sunar.\nKullanım amacını ve faydalarını özetlersek:\nNesneyi yaratan kodu, nesneyi kullanan koddan ayırır. Bağımlılıkları azaltır. Nesneleri standart ve doğru biçimde yaratmayı sağlar. Kod içindeki nesnelerin tipleri (type) ve bağımlılıkları (dependency) önceden bilinmiyorsa kullanmak faydalıdır. Test yazmayı kolaylaştırır. Single Responsibility ve Open/Closed Prensiplerine (SOLID) uygunluğu kolaylaştırır. Repodaki örnekte Golang kullanılmıştır. Class ve kalıtım (inheritance) gibi OOP özelliklerinin bulunmaması nedeniyle, klasik factory pattern, go dilinde uygulanamamaktadır. Ama factory pattern\u0026rsquo;in basit bir şeklini uygulayabiliriz.\nÖrnekte, factory pattern kullanılarak çeşitli platformlara ait oyunlar oluşturulmuştur.\nOyunların temelde sahip olduğu, isim, tür ve platform gibi özellikleri kullanılarak IGame arayüzünden (interface); Game struct\u0026rsquo;ı türetilmiştir. Bu struct\u0026rsquo;tan ise, PcGame, ConsoleGame ve MobileGame adında platforma özel concrete oyunlar türetilmiştir. Yaratılan bu oyunlar dolaylı olarak IGame arayüzüne ait metotları içermektedir. game_platform_factory burada istediğimiz platformda oyunlar üreten bir fabrika görevi üstlenmektedir. Bu sayede örnekte bir müşteri görevi üstlenen main metodumuz; farklı platformdan oyunlar oluşturmak için doğrudan PcGame veya ConsoleGame i kullanmak yerine, game_platform_factory e güvenmektedir.\npackage main import \u0026#34;fmt\u0026#34; func createGame(name, genre string, platform Platform) (IGame, error) { if platform == Pc { return createPcGame(name, genre), nil } else if platform == Console { return createConsoleGame(name, genre), nil } else if platform == Mobile { return createMobileGame(name, genre), nil } return nil, fmt.Errorf(\u0026#34;platform not available\u0026#34;) } Konsol çıktısı :\nGithub linki\nKaynaklar refactoring.guru\n","permalink":"http://localhost:1313/notes/factory-pattern/","summary":"\u003cp\u003eFactory design pattern; \u003cstrong\u003eyaratımsal (creational)\u003c/strong\u003e design pattern kategorisindedir. Nesne yaratmak icin, standart bir mimari sunar.\u003c/p\u003e\n\u003cp\u003eKullanım amacını ve faydalarını özetlersek:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNesneyi yaratan kodu, nesneyi kullanan koddan ayırır. Bağımlılıkları azaltır.\u003c/li\u003e\n\u003cli\u003eNesneleri standart ve doğru biçimde yaratmayı sağlar.\u003c/li\u003e\n\u003cli\u003eKod içindeki nesnelerin tipleri (type) ve bağımlılıkları (dependency) önceden bilinmiyorsa kullanmak faydalıdır.\u003c/li\u003e\n\u003cli\u003eTest yazmayı kolaylaştırır.\u003c/li\u003e\n\u003cli\u003eSingle Responsibility ve Open/Closed Prensiplerine (\u003cstrong\u003eSO\u003c/strong\u003eLID) uygunluğu kolaylaştırır.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRepodaki örnekte \u003ca href=\"https://go.dev\"\u003eGolang\u003c/a\u003e kullanılmıştır. Class ve kalıtım (inheritance) gibi OOP özelliklerinin bulunmaması nedeniyle, klasik factory pattern, go dilinde uygulanamamaktadır. Ama factory pattern\u0026rsquo;in basit bir şeklini uygulayabiliriz.\u003c/p\u003e","title":"Factory Design Pattern"},{"content":"Adaptor design pattern; yapısal (structural) design pattern kategorisindedir. Uyumsuz arayüzler (interface) arasında, iş birliği sağlamak amacıyla kullanılır. 🤝\nKullanım amacını ve faydalarını özetlemek gerekirse:\nYeni bir entegrasyon gerektiğinde, objelere ait arayüzler uyumsuz ise kullanılır. Eski kodu yeni koda uydurmak yerine, yeni yazılan kodu az bir değişikle eski yapıya uygun olarak kullanabilmemizi sağlar. Eski kodda değişiklik gerekmediğinden hata çıkma olasılığı azalır, daha güvenlidir. Git reposundaki örnekte, ICard arayüzünden CreditCard ve BankCard sınıfları türetilmiştir. PrePaidCard sınıfı ise bu arayüzden bağımsız olarak farklı metotlara sahiptir. PrePaidCardAdaptor ile PrePaidCard sınıfı ICard arayüzüne uyumlu hale getirilmiştir. 🚀\nvar cards = new Type[] { typeof(CreditCard), typeof(BankCard), typeof(PrePaidCardAdapter) }; PrePaidCard prePaidCard = new PrePaidCard(); foreach (var cardType in cards) { var cardObject = (cardType.Equals(typeof(PrePaidCardAdapter)) ? Activator.CreateInstance(cardType, prePaidCard) : Activator.CreateInstance(cardType)) as ICard; Console.WriteLine(cardObject?.GetCardDetail(123)); Console.WriteLine($\u0026#34;Total Amount for {cardObject?.GetType().Name} : {cardObject?.GetTotalAmount(1234)}\u0026#34;); Console.WriteLine(\u0026#34;----------------------------\u0026#34;); } } Konsol çıktısı : Github linki\n","permalink":"http://localhost:1313/notes/adaptor-pattern/","summary":"\u003cp\u003eAdaptor design pattern; \u003cstrong\u003eyapısal (structural)\u003c/strong\u003e design pattern kategorisindedir. Uyumsuz arayüzler (interface) arasında, iş birliği sağlamak amacıyla kullanılır. 🤝\u003c/p\u003e\n\u003cp\u003eKullanım amacını ve faydalarını özetlemek gerekirse:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYeni bir entegrasyon gerektiğinde, objelere ait arayüzler uyumsuz ise kullanılır.\u003c/li\u003e\n\u003cli\u003eEski kodu yeni koda uydurmak yerine, yeni yazılan kodu az bir değişikle eski yapıya uygun olarak kullanabilmemizi sağlar.\u003c/li\u003e\n\u003cli\u003eEski kodda değişiklik gerekmediğinden hata çıkma olasılığı azalır, daha güvenlidir.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGit reposundaki \u003ca href=\"https://github.com/brkzr/pattern/tree/main/adapter\"\u003eörnekte\u003c/a\u003e, \u003cstrong\u003eICard\u003c/strong\u003e arayüzünden \u003cstrong\u003eCreditCard\u003c/strong\u003e ve \u003cstrong\u003eBankCard\u003c/strong\u003e sınıfları türetilmiştir.  \u003cstrong\u003ePrePaidCard\u003c/strong\u003e sınıfı ise bu arayüzden bağımsız olarak farklı metotlara sahiptir. \u003cstrong\u003ePrePaidCardAdaptor\u003c/strong\u003e  ile \u003cstrong\u003ePrePaidCard\u003c/strong\u003e  sınıfı \u003cstrong\u003eICard\u003c/strong\u003e arayüzüne uyumlu hale getirilmiştir. 🚀\u003c/p\u003e","title":"Adapter Design Pattern"},{"content":"Useful CLI Shortcus: CTRL + L Clear CLI Screen\nCTRL + C SIGINT Signal Interrupt\nCTRL + D ENDOFSTREAM Signal Interrupt\nCTRL + W Delete Word\nLittle CLI Warm up pwd # print working directory cd path # change working directory cd . # current folder cd .. # parent folder cd / # selected folder cd ~ # home directory ./my-proc # run my-proc process mkdir folderName # create folder touch file # create file echo \u0026#34;Hello\u0026#34; \u0026gt; fileName # Write Hello to file (\u0026gt; mean direction) echo $? # exit code of last process echo $PATH # get path variable echo output{01..12}.txt # echo multiple output file (output01.txt) echo $(!!) # echo last command ls -lrt # content of directory ls -lrt | wc -l # l = lines, c = bytes, w = words, m = characters ls -lrt | awk \u0026#39;{print $9}\u0026#39; # only 9. column ls -lrt | awk \u0026#39;{print $9}\u0026#39; | uniq # only 9. column with unique values sudo chmod 600 fileName # give permission to file sudo chmod -R 755 fileName # give permission to file and root files ps aux | grep my-prog # process status which process name is my-prog kill -l # Signal List kill -INT \u0026lt;processID\u0026gt; # terminate or signal a process (INT) kill -KILL \u0026lt;processID\u0026gt; # terminate or signal a process (KILL) top # process viewer htop # interactive process viewer wc # print newline, word, and byte counts for each file (word count) dd # convert and copy a file hexdump grep -E \u0026lt;regexExp\u0026gt; # search string sed -E # powerful text stream editor -E = Extended printenv # print environment variables # text viewer cat fileName more fileName less fileName tail -10 fileName head - 10 fileName head -n 5 input.txt # first 5 line of input.txt tail -n 5 input.txt # last 5 line of input.txt tail -f log-file.txt # -f = follow (tail not stop) tail -f /dev/null # unlimited listen :D ## Terminal Arithmetic echo $(( 3 + 5 )) # result is 8 expr 3 + 5 # result is 8 # text editor vi fileName vim fileName nano fileName # Permissions (file type, user, group, other) d rwx r-x r-x - rw- r-- r-- N Description ls binary 0 No permissions at all --- 000 1 Only execute --x 001 2 Only write -w- 010 3 Write and execute -wx 011 4 Only read r-- 100 5 Read and execute r-x 101 6 Read and write rw- 110 7 Read, write, and execute rwx 111 # File Types -\tRegular or ordinary file d Directory file l\tLink file b\tBlock special file p\tNamed pipe file c\tCharacter special file s\tSocket file Redirection Commands. \u0026gt; output redirection\n\u0026lt; input redirection\n\u0026raquo; append text to an existing file\nFile Descriptors (FD) Everything is a file (stream) in Linux !!! Every Unix process has the 3 standard file descriptor !!!\n0 stdin (keyboard) 1 stdout (monitor / default) 2 stderr ./your-program \u0026lt; input.txt ./your-program \u0026lt; input.txt \u0026gt; output.txt ./your-program \u0026lt; input.txt 2\u0026gt; output.txt ./your-program \u0026lt; input.txt \u0026gt; output.txt 2\u0026gt;\u0026amp;1 # 2\u0026gt;\u0026amp;1 meaning is direct stdout to stdin PART2 # process detail files path (remember everthing is file) cd /proc cd /proc/\u0026lt;processID\u0026gt; cat environ ## process environments # soft limit (exceed limit then log) # hard limit (exceed limit then kill) cat limits # Adding a Directory to your $PATH export PATH=$PATH:/directory/directory # correct way export PATH=/directory/directory:$PATH # wrong because it searches in the newly path first cat /etc/enviroment ls -lrt \u0026gt; output_ls.txt # write output to file ls -lrt \u0026gt; /dev/null # if result is important !!! echo $? # write result to screen curl -s www.google.com \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 # only result is important echo $? # write result to screen find search for files in a directory hierarchy\nfind . -name my-prog* find . -type d # d = directory, f = files, l symbolic link, c = character devices ... find . -name *.txt | while read filename; do echo $filename; done # write all txt to screen CURL\ncurl https://demo.consul.io/v1/catalog/services?pretty curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq \u0026#39;.[0].Address\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq \u0026#39;.[].Address\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq -r \u0026#39;.[].Address\u0026#39; curl -s https://demo.consul.io/v1/catalog/service/web?pretty | jq -r \u0026#39;.[].Address\u0026#39; | whi le read serverAddr; do curl -s $serverAddr \u0026gt; $serverAddr.txt; done dd convert and copy a file\n## dd convert and copy a file dd if=/dev/zero of=zero-file.txt bs=512 count=2 cat zero-file.txt hexdump -v zero-file.txt dd if=/dev/urandom of=random-file.txt bs=512 count=4 hexdump -v random-file.txt zero devicedan null device a sürekli kopyalama (result = cpu load) dd if=/dev/zero of=/dev/null stress-ng stress test libray\n## 1 cpu %40 load stress-ng -c 1 -l 40 htop cut vs awk\nawk: pattern scanning and processing language cut - remove sections from each line of files echo \u0026#34;john,doe,29,male\u0026#34; |cut -d, -f3 echo \u0026#34;john,doe,29,male\u0026#34; |cut -d, -f4,3 echo \u0026#34;john;doe;29;male\u0026#34; |cut -d\\; -f4,3 echo \u0026#34;john,doe,29,male\u0026#34; | awk -F, \u0026#39;{print $3}\u0026#39; echo \u0026#34;john,doe,29,male\u0026#34; | awk -F, \u0026#39;{print $1, $2 \u0026#34; is \u0026#34; $3 \u0026#34; years old.\u0026#34; }\u0026#39; ifconfig\nifconfig #lo 127.0.0.1 = loopback interface ifconfig en0 | head -5 | tail -1 | awk \u0026#39;{print ($2,$6)}\u0026#39; source\n# bash create a new child process for every process. with \u0026#34;source\u0026#34; command, new command runs with in main process !!! ","permalink":"http://localhost:1313/notes/linux/","summary":"\u003ch3 id=\"useful-cli-shortcus\"\u003eUseful CLI Shortcus:\u003c/h3\u003e\n\u003cp\u003eCTRL + L  Clear CLI Screen\u003cbr\u003e\nCTRL + C  SIGINT Signal Interrupt\u003cbr\u003e\nCTRL + D  ENDOFSTREAM Signal Interrupt\u003cbr\u003e\nCTRL + W  Delete Word\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"little-cli-warm-up\"\u003eLittle CLI Warm up\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003epwd\u003c/span\u003e                     \u003cspan class=\"c1\"\u003e# print working directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e path                 \u003cspan class=\"c1\"\u003e# change working directory \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e .                    \u003cspan class=\"c1\"\u003e# current folder  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ..                   \u003cspan class=\"c1\"\u003e# parent folder   \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /                    \u003cspan class=\"c1\"\u003e# selected folder    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e ~                    \u003cspan class=\"c1\"\u003e# home directory  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e./my-proc               \u003cspan class=\"c1\"\u003e# run my-proc process\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir folderName        \u003cspan class=\"c1\"\u003e# create folder\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etouch file              \u003cspan class=\"c1\"\u003e# create file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Hello\u0026#34;\u003c/span\u003e \u0026gt; fileName \u003cspan class=\"c1\"\u003e# Write Hello to file (\u0026gt; mean direction)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$?\u003c/span\u003e                 \u003cspan class=\"c1\"\u003e# exit code of last process\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"nv\"\u003e$PATH\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# get path variable\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e output\u003cspan class=\"o\"\u003e{\u003c/span\u003e01..12\u003cspan class=\"o\"\u003e}\u003c/span\u003e.txt \u003cspan class=\"c1\"\u003e# echo multiple output file (output01.txt)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003e!!\u003cspan class=\"k\"\u003e)\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# echo last command\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -lrt                             \u003cspan class=\"c1\"\u003e# content of directory\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -lrt \u003cspan class=\"p\"\u003e|\u003c/span\u003e wc -l                     \u003cspan class=\"c1\"\u003e# l = lines, c = bytes, w = words, m = characters\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -lrt \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $9}\u0026#39;\u003c/span\u003e          \u003cspan class=\"c1\"\u003e# only 9. column\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003els -lrt \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $9}\u0026#39;\u003c/span\u003e \u003cspan class=\"p\"\u003e|\u003c/span\u003e uniq   \u003cspan class=\"c1\"\u003e# only 9. column with unique values\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo chmod \u003cspan class=\"m\"\u003e600\u003c/span\u003e  fileName            \u003cspan class=\"c1\"\u003e# give permission to file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo chmod -R \u003cspan class=\"m\"\u003e755\u003c/span\u003e  fileName         \u003cspan class=\"c1\"\u003e# give permission to file and root files\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eps aux \u003cspan class=\"p\"\u003e|\u003c/span\u003e grep my-prog   \u003cspan class=\"c1\"\u003e# process status which process name is my-prog\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -l                 \u003cspan class=\"c1\"\u003e# Signal List \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -INT \u0026lt;processID\u0026gt;   \u003cspan class=\"c1\"\u003e# terminate or signal a process (INT)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ekill\u003c/span\u003e -KILL \u0026lt;processID\u0026gt;  \u003cspan class=\"c1\"\u003e# terminate or signal a process (KILL)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etop                     \u003cspan class=\"c1\"\u003e# process viewer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehtop                    \u003cspan class=\"c1\"\u003e# interactive process viewer\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ewc                      \u003cspan class=\"c1\"\u003e# print newline, word, and byte counts for each file (word count)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edd                      \u003cspan class=\"c1\"\u003e# convert and copy a file\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehexdump\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egrep -E \u0026lt;regexExp\u0026gt;      \u003cspan class=\"c1\"\u003e# search string     \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esed -E                  \u003cspan class=\"c1\"\u003e# powerful text stream editor -E = Extended \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eprintenv                \u003cspan class=\"c1\"\u003e# print environment variables\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# text viewer \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emore fileName \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eless fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etail -10 fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehead - \u003cspan class=\"m\"\u003e10\u003c/span\u003e fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehead -n \u003cspan class=\"m\"\u003e5\u003c/span\u003e input.txt         \u003cspan class=\"c1\"\u003e# first 5 line of input.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etail -n \u003cspan class=\"m\"\u003e5\u003c/span\u003e input.txt         \u003cspan class=\"c1\"\u003e# last 5 line of input.txt\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etail -f log-file.txt        \u003cspan class=\"c1\"\u003e# -f = follow (tail not stop)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003etail -f /dev/null           \u003cspan class=\"c1\"\u003e# unlimited listen :D \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e## Terminal Arithmetic\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"k\"\u003e$((\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"m\"\u003e5\u003c/span\u003e \u003cspan class=\"k\"\u003e))\u003c/span\u003e \u003cspan class=\"c1\"\u003e# result is 8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eexpr \u003cspan class=\"m\"\u003e3\u003c/span\u003e + \u003cspan class=\"m\"\u003e5\u003c/span\u003e        \u003cspan class=\"c1\"\u003e# result is 8 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# text editor\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evi fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evim fileName\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003enano fileName\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Permissions (file type, user, group, other)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ed rwx r-x r-x\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e- rw- r-- r--\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eN   Description                      ls   binary    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e   No permissions at all            ---  \u003cspan class=\"m\"\u003e000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e   Only execute                     --x  \u003cspan class=\"m\"\u003e001\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e   Only write                       -w-  \u003cspan class=\"m\"\u003e010\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e   Write and execute                -wx  \u003cspan class=\"m\"\u003e011\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e4\u003c/span\u003e   Only \u003cspan class=\"nb\"\u003eread\u003c/span\u003e                        r--  \u003cspan class=\"m\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e5\u003c/span\u003e   Read and execute                 r-x  \u003cspan class=\"m\"\u003e101\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e6\u003c/span\u003e   Read and write                   rw-  \u003cspan class=\"m\"\u003e110\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"m\"\u003e7\u003c/span\u003e   Read, write, and execute         rwx  \u003cspan class=\"m\"\u003e111\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# File Types\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-\tRegular or ordinary file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ed \tDirectory file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003el\tLink file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eb\tBlock special file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ep\tNamed pipe file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ec\tCharacter special file\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003es\tSocket file\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"redirection-commands\"\u003eRedirection Commands.\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e\u0026gt;\u003c/strong\u003e     output redirection\u003cbr\u003e\n\u003cstrong\u003e\u0026lt;\u003c/strong\u003e     input redirection\u003cbr\u003e\n\u003cstrong\u003e\u0026raquo;\u003c/strong\u003e    append text to an existing file\u003c/p\u003e","title":"Linux CLI Cheat Sheet"},{"content":"Commonly used docker commands:\nGeneral Commands docker --help # first always ask help from docker --help !!! docker system prune # prune all system (use it carefully !) docker version # docker version (-v) docker stats # stats of running container docker top \u0026lt;containerID\u0026gt; # show process of container docker logs \u0026lt;containerID\u0026gt; # show logs of container docker port \u0026lt;containerID\u0026gt; # show mapped port of container Images \u0026amp; Docker Hub docker search \u0026lt;imageName\u0026gt; # search an image in Docker Hub. docker pull \u0026lt;imageName\u0026gt; # pull an image from Docker Hub docker images # list images docker rmi \u0026lt;imageName\u0026gt; # delete an image docker image prune # remove all unused images docker build -t \u0026lt;imageName\u0026gt; . # build image from dockerfile. use (-no-cache) to avoid cached image Containers docker run \u0026lt;imageName\u0026gt; # start new container from image docker run -d \u0026lt;imageName\u0026gt; # run container in the background (detach) docker run \u0026lt;imageName\u0026gt; ls -lrt /lib # change entrypoint (--enrtypoint) docker run -p 8080:80 ngnix # map a port, (host:container) docker run -n \u0026lt;containerName\u0026gt; \u0026lt;imageName\u0026gt; # assing a name to container (--name) docker run -e PASSWORD=password \u0026lt;imageName\u0026gt; # assing environment value to container () docker run -v ~/:/usr/share \u0026lt;imageName\u0026gt; # map local directory to container (host:container) # docker run -it -v ~/:/usr/share -e PASSWORD=password ubuntu /bin/bash docker exec -it \u0026lt;containerID\u0026gt; bash # bash inside a running container docker pause|unpause \u0026lt;containerID\u0026gt; # pause / unpause (SIGSTOP signal) docker start|stop \u0026lt;containerID\u0026gt; # start / stop (SIGTERM or SIGKILL signal) docker kill \u0026lt;containerID\u0026gt; # default SIGKILL signal (--signal=SIGHUP) docker ps -a # list all containers docker ps -aq # list all container id\u0026#39;s docker ps | tail -1 | awk \u0026#39;{print $1}\u0026#39; # list all container id\u0026#39;s docker rm \u0026lt;containerID\u0026gt; # remove specific container (-f force) docker rm $(docker ps -aq) # remove all containers docker rm `docker ps -aq` # remove all containers Docker-Compose similar to docker commands\ndocker-compose up | down # up / down docker-compose unpause | pause docker-compose start | stop docker-compose up -d # run in background (detach) docker-compose logs docker-compose ps ","permalink":"http://localhost:1313/notes/docker-cheatsheet/","summary":"\u003cp\u003eCommonly used docker commands:\u003c/p\u003e\n\u003ch3 id=\"general-commands\"\u003eGeneral Commands\u003c/h3\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker --help                  \u003cspan class=\"c1\"\u003e# first always ask help from docker --help !!!\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker system prune            \u003cspan class=\"c1\"\u003e# prune all system (use it carefully !)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker version                 \u003cspan class=\"c1\"\u003e# docker version (-v)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker stats                   \u003cspan class=\"c1\"\u003e# stats of running container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker top \u0026lt;containerID\u0026gt;       \u003cspan class=\"c1\"\u003e# show process of container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker logs \u0026lt;containerID\u0026gt;      \u003cspan class=\"c1\"\u003e# show logs of container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker port \u0026lt;containerID\u0026gt;      \u003cspan class=\"c1\"\u003e# show mapped port of container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"images--docker-hub\"\u003eImages \u0026amp; Docker Hub\u003c/h3\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker search \u0026lt;imageName\u0026gt;      \u003cspan class=\"c1\"\u003e# search an image in Docker Hub.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker pull \u0026lt;imageName\u0026gt;        \u003cspan class=\"c1\"\u003e# pull an image from Docker Hub\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker images                  \u003cspan class=\"c1\"\u003e# list images\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker rmi \u0026lt;imageName\u0026gt;         \u003cspan class=\"c1\"\u003e# delete an image\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker image prune             \u003cspan class=\"c1\"\u003e# remove all unused images\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker build -t \u0026lt;imageName\u0026gt; .  \u003cspan class=\"c1\"\u003e# build image from dockerfile. use (-no-cache) to avoid cached image\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"containers\"\u003eContainers\u003c/h3\u003e\n\u003chr\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run \u0026lt;imageName\u0026gt;                  \u003cspan class=\"c1\"\u003e# start new container from image\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -d \u0026lt;imageName\u0026gt;               \u003cspan class=\"c1\"\u003e# run container in the background (detach)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run \u0026lt;imageName\u0026gt; ls -lrt /lib     \u003cspan class=\"c1\"\u003e# change entrypoint (--enrtypoint) \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -p 8080:80 ngnix             \u003cspan class=\"c1\"\u003e# map a port, (host:container)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -n \u0026lt;containerName\u0026gt; \u0026lt;imageName\u0026gt;   \u003cspan class=\"c1\"\u003e# assing a name to container (--name)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -e \u003cspan class=\"nv\"\u003ePASSWORD\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003epassword \u0026lt;imageName\u0026gt; \u003cspan class=\"c1\"\u003e# assing environment value to container ()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker run -v ~/:/usr/share \u0026lt;imageName\u0026gt;     \u003cspan class=\"c1\"\u003e# map local directory to container (host:container)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# docker run -it  -v ~/:/usr/share -e PASSWORD=password ubuntu /bin/bash    \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker \u003cspan class=\"nb\"\u003eexec\u003c/span\u003e -it \u0026lt;containerID\u0026gt; bash      \u003cspan class=\"c1\"\u003e# bash inside a running container\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker pause\u003cspan class=\"p\"\u003e|\u003c/span\u003eunpause \u0026lt;containerID\u0026gt;      \u003cspan class=\"c1\"\u003e# pause / unpause (SIGSTOP signal)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker start\u003cspan class=\"p\"\u003e|\u003c/span\u003estop \u0026lt;containerID\u0026gt;         \u003cspan class=\"c1\"\u003e# start / stop (SIGTERM or SIGKILL signal)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker \u003cspan class=\"nb\"\u003ekill\u003c/span\u003e \u0026lt;containerID\u0026gt;               \u003cspan class=\"c1\"\u003e# default SIGKILL signal (--signal=SIGHUP)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker ps -a                            \u003cspan class=\"c1\"\u003e# list all containers       \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker ps -aq                           \u003cspan class=\"c1\"\u003e# list all container id\u0026#39;s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker ps \u003cspan class=\"p\"\u003e|\u003c/span\u003e tail -1 \u003cspan class=\"p\"\u003e|\u003c/span\u003e awk \u003cspan class=\"s1\"\u003e\u0026#39;{print $1}\u0026#39;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# list all container id\u0026#39;s\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker rm \u0026lt;containerID\u0026gt;                 \u003cspan class=\"c1\"\u003e# remove specific container (-f force)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker rm \u003cspan class=\"k\"\u003e$(\u003c/span\u003edocker ps -aq\u003cspan class=\"k\"\u003e)\u003c/span\u003e              \u003cspan class=\"c1\"\u003e# remove all containers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker rm \u003cspan class=\"sb\"\u003e`\u003c/span\u003edocker ps -aq\u003cspan class=\"sb\"\u003e`\u003c/span\u003e               \u003cspan class=\"c1\"\u003e# remove all containers\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"docker-compose\"\u003eDocker-Compose\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003esimilar to docker commands\u003c/p\u003e","title":"Docker CLI Cheat Sheet"},{"content":"Visual Studio Code günümüzde kullanılan en popüler yazılım geliştirme araçlarından birisi. Microsoft destekli olarak, open source geliştirilen yazılımcı dostu bu IDE; Linux, Mac OS ve Windows işletim sistemlerini desteklenmektedir. Buna rağmen, Chromecast, Raspbian, Fedora,Linux Mint vb. gibi işletim sistemlerinde VS Code\u0026rsquo;u kullanmak için biraz çaba sarf etmek gerekiyor.\nYukarıda bahsettiğim işletim sistemleri için Jay (aka Headmelted), süper bir çalışma yapmış. Bu sayede; VS Code, bu sistemlere hızlı bir şekilde yüklenip kullanabiliyor.\nÖncelikle, sisteme doğru ve gerekli GPG key\u0026lsquo;i eklemek gerekiyor.\nwget https://packagecloud.io/headmelted/codebuilds/gpgkey -O - | sudo apt-key add - Sonrasında, VS Code\u0026rsquo;un şu komut ile yüklenmesi gerekmekte:\ncurl -L https://code.headmelted.com/installers/apt.sh | sudo bash Bu adımlar tamamlandıktan sonra, Raspbian işletim sisteminde Accessories altında Code-OSS (Headmelted) adıyla VS Code\u0026rsquo;un gözüktüğünden emin olunmalı.\nDipNot: Şu an için yüklemeden sonra VS Code siyah ekranda takılı kalıyor. Birden fazla kullanıcı bu konuda github issue açmış. VS Code tarafında yapılan son güncelleme buna sebep olmuş görünüyor. Şimdilik eski versiyona geri dönülerek ilerlenebilir.\nEski versiyona dönmek için:\nsudo apt-get install code-oss=1.29.0-1539702286 VS Code \u0026ldquo;hold\u0026rdquo; olarak işaretlenerek, güncelleme alınması ve tekrar sorun yaşanması engellenebilir. İşlemi geri almak için \u0026ldquo;unhold\u0026rdquo; komutunu çalıştırılmalıdır.\nsudo apt-mark hold code-oss sudo apt-mark unhold code-oss ","permalink":"http://localhost:1313/posts/vs-code-on-raspbian/","summary":"\u003cp\u003e\u003ca href=\"https://code.visualstudio.com/\"\u003eVisual Studio Code\u003c/a\u003e günümüzde kullanılan en popüler yazılım geliştirme araçlarından birisi.  Microsoft destekli olarak, open source geliştirilen yazılımcı dostu bu IDE; Linux, Mac OS ve Windows işletim sistemlerini desteklenmektedir. Buna rağmen, Chromecast, Raspbian, Fedora,Linux Mint vb. gibi işletim sistemlerinde VS Code\u0026rsquo;u kullanmak için  biraz çaba sarf etmek gerekiyor.\u003c/p\u003e\n\u003cp\u003eYukarıda bahsettiğim işletim sistemleri için Jay (aka \u003ca href=\"https://github.com/headmelted\"\u003eHeadmelted\u003c/a\u003e), süper bir \u003ca href=\"https://github.com/headmelted/codebuilds\"\u003eçalışma\u003c/a\u003e yapmış. Bu sayede; VS Code, bu sistemlere hızlı bir şekilde yüklenip kullanabiliyor.\u003c/p\u003e\n\u003cp\u003eÖncelikle, sisteme doğru ve gerekli \u003cstrong\u003eGPG key\u003c/strong\u003e\u0026lsquo;i eklemek gerekiyor.\u003c/p\u003e","title":"Raspbian'a Visual Studio Code Kurulumu"},{"content":"\nMerhabalar, Daha öğretici olacağını düşündüğüm ve dönüp bakabileceğim bir kaynak oluşturmak için uzun bir aradan sonra blog yazıyorum.\nKısa süre içinde daha uzun bir yazı ile karşınızda olacağım :)\n","permalink":"http://localhost:1313/posts/merhaba-dunya/","summary":"\u003cp\u003e\u003cimg alt=\"_config.yml\" loading=\"lazy\" src=\"https://media1.tenor.com/images/ea9df861113fecec5bb17bf1faa0124e/tenor.gif?itemid=3950966#center\"\u003e\u003c/p\u003e\n\u003cp\u003eMerhabalar, Daha öğretici olacağını düşündüğüm ve dönüp bakabileceğim bir kaynak oluşturmak için uzun bir aradan sonra blog yazıyorum.\u003c/p\u003e\n\u003cp\u003eKısa süre içinde daha uzun bir yazı ile karşınızda olacağım :)\u003c/p\u003e","title":"Merhaba Dünya!"},{"content":"\nMerhaba, ben Burak!👋 Yazılım sektöründe çalışan, teknoloji aşığı, hayat boyu öğrenci olarak kalacak bir kişilik.\nİletişim Kur burak.ozerr[at]gmail.com\n","permalink":"http://localhost:1313/about/","summary":"about","title":"Hakkımda"}]